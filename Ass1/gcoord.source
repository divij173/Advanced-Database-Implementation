---------------------------------------------------------------------------
--
-- gcoord.sql-
--    This file shows how to create a new user-defined type and how to
--    use this new type.
--
-- src/tutorial/gcoord.source
--
---------------------------------------------------------------------------
CREATE TYPE GeoCoord;
-----------------------------

CREATE FUNCTION gcoord_in(cstring)
   RETURNS GeoCoord
   AS '_OBJWD_/gcoord'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION gcoord_out(GeoCoord)
   RETURNS cstring
   AS '_OBJWD_/gcoord'
   LANGUAGE C IMMUTABLE STRICT;


CREATE FUNCTION gcoord_recv(internal)
   RETURNS GeoCoord
   AS '_OBJWD_/gcoord'
   LANGUAGE C IMMUTABLE STRICT;


CREATE FUNCTION gcoord_send(GeoCoord)
   RETURNS bytea
   AS '_OBJWD_/gcoord'
   LANGUAGE C IMMUTABLE STRICT;


CREATE TYPE GeoCoord (
   internallength = variable,
   input = gcoord_in,
   output = gcoord_out,
   receive = gcoord_recv,
   send = gcoord_send
);



-----------------------------
-- Interfacing New Types with Indexes:
--	We cannot define a secondary index (eg. a B-tree) over the new type
--	yet. We need to create all the required operators and support
--      functions, then we can make the operator class.
-----------------------------

-- first, define the required operators
CREATE FUNCTION gcoord_abs_lt(GeoCoord, GeoCoord) RETURNS bool
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION gcoord_abs_le(GeoCoord, GeoCoord) RETURNS bool
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION gcoord_abs_eq(GeoCoord, GeoCoord) RETURNS bool
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION gcoord_abs_neq(GeoCoord, GeoCoord) RETURNS bool
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION gcoord_abs_ge(GeoCoord, GeoCoord) RETURNS bool
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION gcoord_abs_gt(GeoCoord, GeoCoord) RETURNS bool
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION gcoord_abs_geq(GeoCoord, GeoCoord) RETURNS bool
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR < (
   leftarg = GeoCoord, rightarg = GeoCoord, procedure = gcoord_abs_lt,
   commutator = > , negator = >= ,
   restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR <= (
   leftarg = GeoCoord, rightarg = GeoCoord, procedure = gcoord_abs_le,
   commutator = >= , negator = > ,
   restrict = scalarlesel, join = scalarlejoinsel
);
CREATE OPERATOR = (
   leftarg = GeoCoord, rightarg = GeoCoord, procedure = gcoord_abs_eq,
   commutator = = , negator = <> ,
   -- leave out negator since we didn't create <> operator
   -- negator = <> ,
   restrict = eqsel, join = eqjoinsel
);
CREATE OPERATOR <> (
   leftarg = GeoCoord, rightarg = GeoCoord, procedure = gcoord_abs_neq,
   commutator = <> ,negator = = ,
   -- leave out negator since we didn't create <> operator
   -- negator = = ,
   restrict = neqsel, join = neqjoinsel
);
CREATE OPERATOR >= (
   leftarg = GeoCoord, rightarg = GeoCoord, procedure = gcoord_abs_ge,
   commutator = <= , negator = < ,
   restrict = scalargesel, join = scalargejoinsel
);
CREATE OPERATOR > (
   leftarg = GeoCoord, rightarg = GeoCoord, procedure = gcoord_abs_gt,
   commutator = < , negator = <= ,
   restrict = scalargtsel, join = scalargtjoinsel
);
CREATE OPERATOR ~ (
   leftarg = GeoCoord, rightarg = GeoCoord, procedure = gcoord_abs_geq,
   commutator = ~ ,
   -- leave out negator since we didn't create <> operator
   -- negator = <> ,
   restrict = eqsel, join = eqjoinsel
);

-- create the support function too
CREATE FUNCTION gcoord_abs_cmp(GeoCoord, GeoCoord) RETURNS int4
   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION convert_string(GeoCoord)
   RETURNS text
   AS '_OBJWD_/gcoord'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION convert2dms(GeoCoord)
   RETURNS text
   AS '_OBJWD_/gcoord'
   LANGUAGE C IMMUTABLE STRICT;

-- CREATE FUNCTION gcoord_hash(GeoCoord) RETURNS int4
--   AS '_OBJWD_/gcoord' LANGUAGE C IMMUTABLE STRICT;

-- now we can make the operator class
CREATE OPERATOR CLASS gcoord_abs_ops
    DEFAULT FOR TYPE GeoCoord USING btree AS
        OPERATOR        1       < ,
        OPERATOR        2       <= ,
        OPERATOR        3       = , 
        OPERATOR        4       >= ,
        OPERATOR        5       > ,
        FUNCTION        1       gcoord_abs_cmp(GeoCoord, GeoCoord);


-- CREATE OPERATOR CLASS GeoCoord_hash_ops
--    DEFAULT FOR TYPE GeoCoord USING hash AS
--        OPERATOR        1       = ,
--        FUNCTION        1       gcoord_hash(GeoCoord);